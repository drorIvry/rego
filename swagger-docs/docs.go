// Code generated by swaggo/swag. DO NOT EDIT.

package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "XXXX",
            "email": "XXX@gmail.com"
        },
        "license": {
            "name": "MIT",
            "url": "https://opensource.org/license/mit/"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/v1/execution/{executionId}/abort": {
            "get": {
                "description": "Kill a running k8s job and update its task execution",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "execution"
                ],
                "summary": "Abort a running task and kill the pod",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The task execution id",
                        "name": "executionId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/api/v1/task": {
            "get": {
                "description": "Filter to get the task definitions you need",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "definition"
                ],
                "summary": "Get all task definitions",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.TaskDefinition"
                            }
                        }
                    }
                }
            },
            "put": {
                "description": "Update a definition of a task to run with cadence, parameters and runtime data",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "definition"
                ],
                "summary": "Update a task definition",
                "parameters": [
                    {
                        "description": "Task definition JSON",
                        "name": "newTaskDef",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.TaskDefinition"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            },
            "post": {
                "description": "Generate a new definition of a task to run with cadence, parameters and runtime data",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "definition"
                ],
                "summary": "Create a new task definition",
                "parameters": [
                    {
                        "description": "Task definition JSON",
                        "name": "newTaskDef",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.TaskDefinition"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/api/v1/task/pending": {
            "get": {
                "description": "Filter to get the task pending tasks",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "definition"
                ],
                "summary": "Get all of the pending task definitions",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.TaskDefinition"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/task/{definitionId}": {
            "delete": {
                "description": "Mark a task definition as deleted (it is not actually deleted from the db)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "definition"
                ],
                "summary": "Delete a task definition",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The task definition id",
                        "name": "definitionId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/api/v1/task/{definitionId}/latest": {
            "get": {
                "description": "Filter to get the task definitions you need",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "definition"
                ],
                "summary": "Get the latest execution of a given definitions",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The task definition id",
                        "name": "definitionId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.TaskExecution"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/task/{definitionId}/rerun": {
            "post": {
                "description": "Rerun a task definition previously created",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "definition"
                ],
                "summary": "Rerun a task definition",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The task definition id",
                        "name": "definitionId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/ping": {
            "get": {
                "description": "Used for health check",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Health"
                ],
                "summary": "Health check route",
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        }
    },
    "definitions": {
        "gorm.DeletedAt": {
            "type": "object",
            "properties": {
                "time": {
                    "type": "string"
                },
                "valid": {
                    "description": "Valid is true if Time is not NULL",
                    "type": "boolean"
                }
            }
        },
        "models.Status": {
            "type": "integer",
            "enum": [
                100,
                200,
                250,
                300,
                400,
                410,
                420,
                430,
                500
            ],
            "x-enum-varnames": [
                "READY",
                "JOB_DEPLOYED",
                "PENDING",
                "RUNNING",
                "TIMEOUT",
                "PROC_ERROR",
                "APP_ERROR",
                "ABORTED",
                "SUCCESS"
            ]
        },
        "models.TaskDefinition": {
            "type": "object",
            "required": [
                "image"
            ],
            "properties": {
                "cmd": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "createdAt": {
                    "type": "string"
                },
                "deleted": {
                    "type": "boolean"
                },
                "deletedAt": {
                    "$ref": "#/definitions/gorm.DeletedAt"
                },
                "enabled": {
                    "type": "boolean"
                },
                "execution_counter": {
                    "type": "integer"
                },
                "execution_interval": {
                    "type": "integer"
                },
                "id": {
                    "description": ";default:uuid_generate_v4()\"",
                    "type": "string"
                },
                "image": {
                    "type": "string"
                },
                "metadata": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "name": {
                    "type": "string"
                },
                "namespace": {
                    "type": "string"
                },
                "next_execution_time": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "models.TaskExecution": {
            "type": "object",
            "required": [
                "image"
            ],
            "properties": {
                "cmd": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "createdAt": {
                    "type": "string"
                },
                "deletedAt": {
                    "$ref": "#/definitions/gorm.DeletedAt"
                },
                "id": {
                    "description": ";default:uuid_generate_v4()\"",
                    "type": "string"
                },
                "image": {
                    "type": "string"
                },
                "metadata": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "name": {
                    "type": "string"
                },
                "namespace": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "status_code": {
                    "$ref": "#/definitions/models.Status"
                },
                "task_definition_id": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:3000",
	BasePath:         "/api/v1",
	Schemes:          []string{},
	Title:            "Matter",
	Description:      "Schedualing workloads made easy.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
